/**
 * Script de test pour v√©rifier la synchronisation des cr√©neaux de publication
 * 
 * Ce script teste le flux complet :
 * 1. Cr√©ation d'un √©v√©nement de publication avec s√©lection de cr√©neau
 * 2. V√©rification que l'ID du cr√©neau est stock√© dans l'√©v√©nement
 * 3. Suppression de l'√©v√©nement et v√©rification que le cr√©neau est lib√©r√©
 */

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function testCreneauSync() {
  console.log('üß™ Test de synchronisation des cr√©neaux de publication');
  console.log('====================================================');

  try {
    // 1. R√©cup√©rer un cr√©neau libre pour le test
    console.log('\n1Ô∏è‚É£ R√©cup√©ration d\'un cr√©neau libre...');
    
    const creneauxResponse = await fetch(`${BASE_URL}/api/publications/creneaux?start=2024-01-01&limit=10`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!creneauxResponse.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration des cr√©neaux: ${creneauxResponse.status}`);
    }

    const creneauxData = await creneauxResponse.json();
    const freeCreneau = creneauxData.results.find(c => 
      c.STATUT_DE_PUBLICATION && c.STATUT_DE_PUBLICATION.includes('recfExTXxcNivX1i4')
    );

    if (!freeCreneau) {
      console.log('‚ö†Ô∏è Aucun cr√©neau libre trouv√© pour le test');
      return;
    }

    console.log('‚úÖ Cr√©neau libre trouv√©:', freeCreneau.id, freeCreneau.CATEGORIE, freeCreneau.DATE);

    // 2. Cr√©er un √©v√©nement de publication avec ce cr√©neau
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'un √©v√©nement de publication...');
    
    const publicationEvent = {
      title: 'Test Publication - Synchronisation Cr√©neau',
      type: 'publication',
      date: freeCreneau.DATE,
      startTime: '14:00',
      endTime: '15:00',
      description: 'Test de synchronisation des cr√©neaux',
      category: 'siege',
      'Creneau': [freeCreneau.id], // Champ de liaison (array)
      googleEventId: 'test-google-event-123', // ID Google Calendar de test
    };

    const createResponse = await fetch(`${BASE_URL}/api/agenda`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(publicationEvent),
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`Erreur lors de la cr√©ation: ${createResponse.status} - ${errorText}`);
    }

    const createdEvent = await createResponse.json();
    console.log('‚úÖ √âv√©nement de publication cr√©√©:', createdEvent.id);

    // 3. V√©rifier que l'√©v√©nement a bien l'ID du cr√©neau
    console.log('\n3Ô∏è‚É£ V√©rification de l\'ID du cr√©neau stock√©...');
    
    const getResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!getResponse.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration: ${getResponse.status}`);
    }

    const eventDetails = await getResponse.json();
    
    if (eventDetails.creneauId) {
      console.log('‚úÖ ID du cr√©neau trouv√© dans l\'√©v√©nement:', eventDetails.creneauId);
    } else {
      console.log('‚ùå ID du cr√©neau manquant dans l\'√©v√©nement');
    }

    // 4. V√©rifier que le cr√©neau est maintenant indisponible
    console.log('\n4Ô∏è‚É£ V√©rification du statut du cr√©neau...');
    
    const creneauCheckResponse = await fetch(`${BASE_URL}/api/publications/creneaux?id=${freeCreneau.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (creneauCheckResponse.ok) {
      const creneauDetails = await creneauCheckResponse.json();
      console.log('üìä Statut actuel du cr√©neau:', creneauDetails.STATUT_DE_PUBLICATION);
    }

    // 5. Supprimer l'√©v√©nement et v√©rifier que le cr√©neau est lib√©r√©
    console.log('\n5Ô∏è‚É£ Suppression de l\'√©v√©nement et lib√©ration du cr√©neau...');
    
    const deleteResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!deleteResponse.ok) {
      throw new Error(`Erreur lors de la suppression: ${deleteResponse.status}`);
    }

    console.log('‚úÖ √âv√©nement supprim√©');

    // 6. V√©rifier que le cr√©neau est maintenant libre
    console.log('\n6Ô∏è‚É£ V√©rification que le cr√©neau est lib√©r√©...');
    
    const finalCreneauCheckResponse = await fetch(`${BASE_URL}/api/publications/creneaux?id=${freeCreneau.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (finalCreneauCheckResponse.ok) {
      const finalCreneauDetails = await finalCreneauCheckResponse.json();
      const isFree = finalCreneauDetails.STATUT_DE_PUBLICATION && 
                     finalCreneauDetails.STATUT_DE_PUBLICATION.includes('recfExTXxcNivX1i4');
      
      if (isFree) {
        console.log('‚úÖ Cr√©neau lib√©r√© avec succ√®s - Statut: üü© Libre');
      } else {
        console.log('‚ùå Cr√©neau non lib√©r√© - Statut:', finalCreneauDetails.STATUT_DE_PUBLICATION);
      }
    }

    console.log('\nüéâ Test termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Instructions d'utilisation
console.log(`
üìã Instructions pour utiliser ce script :

1. Assurez-vous que votre serveur Next.js est d√©marr√©
2. Remplacez 'YOUR_ACCESS_TOKEN' par un token d'acc√®s valide
3. Ex√©cutez le script avec : node test-creneau-sync.js

Le script testera :
- R√©cup√©ration d'un cr√©neau libre
- Cr√©ation d'√©v√©nement de publication avec ID de cr√©neau
- Stockage de l'ID du cr√©neau dans l'√©v√©nement
- Suppression de l'√©v√©nement
- Lib√©ration automatique du cr√©neau (üü© Libre)
`);

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testCreneauSync();
}

module.exports = { testCreneauSync };
