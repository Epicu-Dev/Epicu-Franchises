/**
 * Script de test pour v√©rifier la synchronisation Google Calendar
 * 
 * Ce script teste le flux complet :
 * 1. Cr√©ation d'un √©v√©nement EPICU (qui devrait cr√©er dans Airtable + Google Calendar)
 * 2. V√©rification que l'ID Google Calendar est stock√© dans Airtable
 * 3. Suppression de l'√©v√©nement (qui devrait supprimer des deux c√¥t√©s)
 */

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function testGoogleCalendarSync() {
  console.log('üß™ Test de synchronisation Google Calendar');
  console.log('==========================================');

  try {
    // 1. Cr√©er un √©v√©nement de test
    console.log('\n1Ô∏è‚É£ Cr√©ation d\'un √©v√©nement de test...');
    
    const eventData = {
      title: 'Test Synchronisation Google Calendar',
      type: 'evenement',
      date: new Date().toISOString(),
      startTime: '14:00',
      endTime: '15:00',
      description: '√âv√©nement de test pour v√©rifier la synchronisation',
      category: 'siege',
      collaborator: 'test-user-id', // Remplacer par un ID valide
    };

    const createResponse = await fetch(`${BASE_URL}/api/agenda`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(eventData),
    });

    if (!createResponse.ok) {
      throw new Error(`Erreur lors de la cr√©ation: ${createResponse.status}`);
    }

    const createdEvent = await createResponse.json();
    console.log('‚úÖ √âv√©nement cr√©√©:', createdEvent.id);

    // 2. V√©rifier que l'√©v√©nement a un googleEventId
    console.log('\n2Ô∏è‚É£ V√©rification de l\'ID Google Calendar...');
    
    const getResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!getResponse.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration: ${getResponse.status}`);
    }

    const eventDetails = await getResponse.json();
    
    if (eventDetails.googleEventId) {
      console.log('‚úÖ ID Google Calendar trouv√©:', eventDetails.googleEventId);
    } else {
      console.log('‚ö†Ô∏è Aucun ID Google Calendar trouv√© - v√©rifiez la connexion Google Calendar');
    }

    // 3. Supprimer l'√©v√©nement
    console.log('\n3Ô∏è‚É£ Suppression de l\'√©v√©nement...');
    
    const deleteResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!deleteResponse.ok) {
      throw new Error(`Erreur lors de la suppression: ${deleteResponse.status}`);
    }

    console.log('‚úÖ √âv√©nement supprim√© avec succ√®s');
    console.log('\nüéâ Test termin√© - V√©rifiez que l\'√©v√©nement a √©t√© supprim√© de Google Calendar');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Instructions d'utilisation
console.log(`
üìã Instructions pour utiliser ce script :

1. Assurez-vous que votre serveur Next.js est d√©marr√©
2. Remplacez 'YOUR_ACCESS_TOKEN' par un token d'acc√®s valide
3. Remplacez 'test-user-id' par un ID de collaborateur valide
4. Ex√©cutez le script avec : node test-google-calendar-sync.js

Le script testera :
- Cr√©ation d'√©v√©nement avec synchronisation Google Calendar
- Stockage de l'ID Google Calendar dans Airtable
- Suppression bidirectionnelle (Airtable + Google Calendar)
`);

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testGoogleCalendarSync();
}

module.exports = { testGoogleCalendarSync };
