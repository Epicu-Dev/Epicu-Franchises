/**
 * Script de test direct de l'API pour v√©rifier le stockage des IDs
 */

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function testApiDirect() {
  console.log('üß™ Test direct de l\'API');
  console.log('========================');

  try {
    // 1. Cr√©er un √©v√©nement avec les deux IDs
    console.log('\n1Ô∏è‚É£ Cr√©ation d\'un √©v√©nement avec IDs...');
    
    const testEvent = {
      title: 'Test API Direct',
      type: 'publication',
      date: new Date().toISOString().split('T')[0],
      startTime: '14:00',
      endTime: '15:00',
      description: 'Test direct de l\'API',
      category: 'siege',
      'Creneau': ['recTestCreneau123'], // Champ de liaison
      googleEventId: 'test-google-event-456', // ID Google Calendar
    };

    console.log('üì§ Donn√©es envoy√©es:', JSON.stringify(testEvent, null, 2));

    const createResponse = await fetch(`${BASE_URL}/api/agenda`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(testEvent),
    });

    console.log('üìä Statut de la r√©ponse:', createResponse.status);
    console.log('üìä Headers de la r√©ponse:', Object.fromEntries(createResponse.headers.entries()));

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      console.error('‚ùå Erreur lors de la cr√©ation:', errorText);
      throw new Error(`Erreur lors de la cr√©ation: ${createResponse.status} - ${errorText}`);
    }

    const createdEvent = await createResponse.json();
    console.log('‚úÖ √âv√©nement cr√©√©:', createdEvent);
    console.log('üìã ID de l\'√©v√©nement:', createdEvent.id);

    // 2. V√©rifier imm√©diatement les donn√©es stock√©es
    console.log('\n2Ô∏è‚É£ V√©rification imm√©diate des donn√©es...');
    
    const getResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!getResponse.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration: ${getResponse.status}`);
    }

    const eventDetails = await getResponse.json();
    console.log('üìã D√©tails complets de l\'√©v√©nement:', JSON.stringify(eventDetails, null, 2));
    
    // V√©rifications sp√©cifiques
    console.log('\n3Ô∏è‚É£ V√©rifications sp√©cifiques...');
    
    if (eventDetails.googleEventId) {
      console.log('‚úÖ Google Event ID trouv√©:', eventDetails.googleEventId);
    } else {
      console.log('‚ùå Google Event ID manquant');
    }
    
    if (eventDetails.creneauId) {
      console.log('‚úÖ Creneau ID trouv√©:', eventDetails.creneauId);
    } else {
      console.log('‚ùå Creneau ID manquant');
    }

    // 4. Test de mise √† jour
    console.log('\n4Ô∏è‚É£ Test de mise √† jour...');
    
    const updateData = {
      googleEventId: 'updated-google-789',
      'Creneau': ['recUpdatedCreneau456'],
    };

    console.log('üì§ Donn√©es de mise √† jour:', JSON.stringify(updateData, null, 2));

    const updateResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(updateData),
    });

    console.log('üìä Statut de la mise √† jour:', updateResponse.status);

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      console.error('‚ùå Erreur lors de la mise √† jour:', errorText);
    } else {
      const updatedEvent = await updateResponse.json();
      console.log('‚úÖ √âv√©nement mis √† jour:', updatedEvent);
    }

    // 5. Nettoyage
    console.log('\n5Ô∏è‚É£ Nettoyage...');
    
    const deleteResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (deleteResponse.ok) {
      console.log('‚úÖ √âv√©nement supprim√©');
    } else {
      console.log('‚ö†Ô∏è Impossible de supprimer l\'√©v√©nement');
    }

    console.log('\nüéâ Test termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Instructions d'utilisation
console.log(`
üìã Instructions pour utiliser ce script :

1. Assurez-vous que votre serveur Next.js est d√©marr√©
2. Remplacez 'YOUR_ACCESS_TOKEN' par un token d'acc√®s valide
3. Ex√©cutez le script avec : node test-api-direct.js

Ce script teste directement l'API pour :
- Cr√©ation d'√©v√©nement avec IDs
- V√©rification des donn√©es stock√©es
- Mise √† jour des IDs
- Suppression de l'√©v√©nement
`);

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testApiDirect();
}

module.exports = { testApiDirect };
