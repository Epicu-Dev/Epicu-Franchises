/**
 * Script de test pour v√©rifier que le champ Google Event ID est bien g√©r√©
 */

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function testGoogleEventIdField() {
  console.log('üß™ Test du champ Google Event ID');
  console.log('================================');

  try {
    // Test 1: Cr√©ation d'un √©v√©nement avec Google Event ID
    console.log('\n1Ô∏è‚É£ Test de cr√©ation avec Google Event ID...');
    
    const eventData = {
      title: 'Test Google Event ID',
      type: 'evenement',
      date: new Date().toISOString(),
      startTime: '14:00',
      endTime: '15:00',
      description: 'Test du champ Google Event ID',
      category: 'siege',
      googleEventId: 'test-google-event-123', // ID de test
    };

    const createResponse = await fetch(`${BASE_URL}/api/agenda`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(eventData),
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`Erreur lors de la cr√©ation: ${createResponse.status} - ${errorText}`);
    }

    const createdEvent = await createResponse.json();
    console.log('‚úÖ √âv√©nement cr√©√©:', createdEvent.id);
    console.log('üìã Donn√©es cr√©√©es:', createdEvent);

    // Test 2: Mise √† jour de l'√©v√©nement avec un nouvel ID Google
    console.log('\n2Ô∏è‚É£ Test de mise √† jour avec Google Event ID...');
    
    const updateData = {
      googleEventId: 'updated-google-event-456',
    };

    const updateResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
      body: JSON.stringify(updateData),
    });

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`Erreur lors de la mise √† jour: ${updateResponse.status} - ${errorText}`);
    }

    const updatedEvent = await updateResponse.json();
    console.log('‚úÖ √âv√©nement mis √† jour:', updatedEvent.id);
    console.log('üìã Champs mis √† jour:', updatedEvent.fields);

    // Test 3: R√©cup√©ration de l'√©v√©nement pour v√©rifier
    console.log('\n3Ô∏è‚É£ Test de r√©cup√©ration pour v√©rifier le champ...');
    
    const getResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!getResponse.ok) {
      const errorText = await getResponse.text();
      throw new Error(`Erreur lors de la r√©cup√©ration: ${getResponse.status} - ${errorText}`);
    }

    const eventDetails = await getResponse.json();
    console.log('‚úÖ √âv√©nement r√©cup√©r√©:', eventDetails);
    
    if (eventDetails.googleEventId) {
      console.log('‚úÖ Google Event ID trouv√©:', eventDetails.googleEventId);
    } else {
      console.log('‚ùå Google Event ID manquant dans les donn√©es r√©cup√©r√©es');
    }

    // Nettoyage: Supprimer l'√©v√©nement de test
    console.log('\n4Ô∏è‚É£ Nettoyage - Suppression de l\'√©v√©nement de test...');
    
    const deleteResponse = await fetch(`${BASE_URL}/api/agenda?id=${createdEvent.id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': 'Bearer YOUR_ACCESS_TOKEN', // Remplacer par un token valide
      },
    });

    if (!deleteResponse.ok) {
      console.warn('‚ö†Ô∏è Impossible de supprimer l\'√©v√©nement de test');
    } else {
      console.log('‚úÖ √âv√©nement de test supprim√©');
    }

    console.log('\nüéâ Test termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Instructions d'utilisation
console.log(`
üìã Instructions pour utiliser ce script :

1. Assurez-vous que votre serveur Next.js est d√©marr√©
2. Remplacez 'YOUR_ACCESS_TOKEN' par un token d'acc√®s valide
3. Ex√©cutez le script avec : node test-google-event-id.js

Le script testera :
- Cr√©ation d'√©v√©nement avec googleEventId
- Mise √† jour d'√©v√©nement avec googleEventId
- R√©cup√©ration pour v√©rifier que le champ est bien stock√©
- Suppression de l'√©v√©nement de test
`);

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testGoogleEventIdField();
}

module.exports = { testGoogleEventIdField };
